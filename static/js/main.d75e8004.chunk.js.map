{"version":3,"sources":["components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["Loading","props","react_default","a","createElement","style","height","className","react_spinners","size","color","Main","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","quotes","quote","author","themes","fetchRandomQuote","bind","assertThisInitialized","index","parseInt","Math","random","length","setState","changeTheme","backgroundColor","light","dark","_this2","lightColors","darkColors","i","push","setTimeout","fetch","then","response","json","catch","error","console","log","id","Card","border","borderRadius","CardBody","href","encodeURI","onClick","MainComponent_Loading","Component","App","MainComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uSAGMA,EAAU,SAACC,GAChB,OACCC,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,OAAO,SAAUC,UAAU,oDACvCL,EAAAC,EAAAC,cAACI,EAAA,WAAD,CACCC,KAAK,KACLC,MAAOT,EAAMS,UAmIFC,cA3Hd,SAAAA,EAAYV,GAAO,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMd,KACDkB,MAAQ,CACZC,OAAQ,GACRC,MAAO,GACPC,OAAQ,GACTC,OAAQ,IAERX,EAAKY,iBAAmBZ,EAAKY,iBAAiBC,KAAtBZ,OAAAa,EAAA,EAAAb,QAAAa,EAAA,EAAAb,CAAAD,KARPA,kFAYlB,IAAIe,EAAQC,SAASC,KAAKC,SAASf,KAAKI,MAAMC,OAAOW,QAClDhB,KAAKI,MAAMC,QACbL,KAAKiB,SAAS,CACbX,MAAON,KAAKI,MAAMC,OAAOO,GAAON,MAChCC,OAAQP,KAAKI,MAAMC,OAAOO,GAAOL,SAGnCP,KAAKkB,oDAIL,IAAIN,EAAQC,SAASC,KAAKC,SAASf,KAAKI,MAAMI,OAAOQ,QACrDhB,KAAKiB,SAAS,CACbE,gBAAiBnB,KAAKI,MAAMI,OAAOI,GAAOQ,MAC1CzB,MAAOK,KAAKI,MAAMI,OAAOI,GAAOS,mDAkBjC,IAdkB,IAAAC,EAAAtB,KACZuB,EAAc,CAAC,UAAW,UAAW,UAC1C,UAAW,UAAW,UACtB,UAAW,UAAW,UACtB,UAAW,UAAW,UACtB,UAAW,WAENC,EAAa,CAAC,UAAW,UAAW,UACzC,UAAW,UAAW,UACtB,UAAW,UAAW,UACtB,UAAW,UAAW,UACtB,UAAW,WAERhB,EAAS,GACLiB,EAAE,EAAGA,EAAEF,EAAYP,OAAQS,IAClCjB,EAAOkB,KAAK,CACXN,MAAOG,EAAYE,GACnBJ,KAAMG,EAAWC,KAGnBzB,KAAKiB,SAAS,CAACT,OAAQA,GAAQ,WAC9Bc,EAAKJ,gBAENS,WACC,WACCC,MAAM,0IACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAC,GACLR,EAAKL,SAAS,CAACZ,OAAQyB,EAASzB,SAChCiB,EAAKb,qBAELuB,MAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,sBAAuBF,MACjD,sCAKJ,OAAIjC,KAAKI,MAAMC,OAAOW,OAIpB7B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,4CACdL,EAAAC,EAAAC,cAAA,OAAK+C,GAAG,OAAO5C,UAAU,mDAAmDF,MAAO,CAAC6B,gBAAiBnB,KAAKI,MAAMe,kBAChHhC,EAAAC,EAAAC,cAACgD,EAAA,EAAD,CAAMD,GAAG,YAAY9C,MAAO,CAACgD,OAAQ,aAAetC,KAAKI,MAAMT,MAAO4C,aAAc,SACnFpD,EAAAC,EAAAC,cAACmD,EAAA,EAAD,CAAU7C,MAAM,SACfR,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iEACdL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,UACdL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,uBAAuB4C,GAAG,OAAO9C,MAAO,CAACK,MAAOK,KAAKI,MAAMT,QACvER,EAAAC,EAAAC,cAAA,QAAMG,UAAU,oBAAoB,IACnC,IAAMQ,KAAKI,MAAME,MAAQ,IAC1BnB,EAAAC,EAAAC,cAAA,QAAMG,UAAU,qBAAqB,MAGvCL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,uCACdL,EAAAC,EAAAC,cAAA,KAAG+C,GAAG,SAAS5C,UAAU,kDAAkDF,MAAO,CAACK,MAAOK,KAAKI,MAAMT,QAAS,KAAOK,KAAKI,MAAMG,SAEjIpB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mEACdL,EAAAC,EAAAC,cAAA,KACCoD,KAAM,yCAAyCC,UAAU1C,KAAKI,MAAME,MAAQ,OAASN,KAAKI,MAAMG,QAChGf,UAAU,aACV4C,GAAG,cACH9C,MAAO,CAAC6B,gBAAiBnB,KAAKI,MAAMT,MAAOA,MAAOK,KAAKI,MAAMe,kBAE7DhC,EAAAC,EAAAC,cAAA,QAAMG,UAAU,uBAAuB,KAExCL,EAAAC,EAAAC,cAAA,UACCC,MAAO,CAAC6B,gBAAiBnB,KAAKI,MAAMT,MAAOA,MAAOK,KAAKI,MAAMe,iBAC7D3B,UAAU,cACV4C,GAAG,YACHO,QAAS3C,KAAKS,kBAEdtB,EAAAC,EAAAC,cAAA,QAAMG,UAAU,oBAAoB,IACnC,oBAONL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,aACjBL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,WACdL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACdL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,oBAAb,gBAA6CL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,cAAcF,MAAO,CAACK,MAAO,QAAS,IAAnG,sBA5CER,EAAAC,EAAAC,cAACuD,EAAD,CAASjD,MAAOK,KAAKI,MAAMT,eAtElBkD,aCAJC,gMANX,OACI3D,EAAAC,EAAAC,cAAC0D,EAAD,aAHUF,cCMEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnE,EAAAC,EAAAC,cAACkE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.d75e8004.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Card, CardBody} from 'reactstrap';\r\nimport {HashLoader} from 'react-spinners';\r\nconst Loading = (props) => {\r\n\treturn (\r\n\t\t<div style={{height:\"100vh\"}} className=\"d-flex align-items-center justify-content-center\">\r\n\t\t\t<HashLoader\r\n\t\t\t\tsize=\"50\"\r\n\t\t\t\tcolor={props.color}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nclass Main extends Component {\r\n\r\n\tconstructor(props) {\r\n\t  super(props);\r\n\t  this.state = {\r\n\t  \tquotes: [],\r\n\t  \tquote: '',\r\n\t  \tauthor: '',\r\n\t\t\tthemes: []\r\n\t  };\r\n\t  this.fetchRandomQuote = this.fetchRandomQuote.bind(this);\r\n\t}\r\n\r\n\tfetchRandomQuote(){\r\n\t\tlet index = parseInt(Math.random()*this.state.quotes.length);\r\n\t\tif(this.state.quotes){\r\n\t\t\tthis.setState({\r\n\t\t\t\tquote: this.state.quotes[index].quote,\r\n\t\t\t\tauthor: this.state.quotes[index].author\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.changeTheme();\r\n\t}\r\n\r\n\tchangeTheme(){\r\n\t\tlet index = parseInt(Math.random()*this.state.themes.length);\r\n\t\tthis.setState({\r\n\t\t\tbackgroundColor: this.state.themes[index].light,\r\n\t\t\tcolor: this.state.themes[index].dark\r\n\t\t});\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tconst lightColors = [\"#FFCDD2\", \"#F8BBD0\", \"#E1BEE7\",\r\n\t\t\t\"#D1C4E9\", \"#BBDEFB\", \"#B2EBF2\",\r\n\t\t\t\"#C8E6C9\", \"#DCEDC8\", \"#FFF9C4\",\r\n\t\t\t\"#FFE0B2\", \"#FFCCBC\", \"#D7CCC8\",\r\n\t\t\t\"#F5F5F5\", \"#CFD8DC\"\r\n\t\t];\r\n\t\tconst darkColors = [\"#B71C1C\", \"#880E4F\", \"#4A148C\",\r\n\t\t\t\"#311B92\", \"#0D47A1\", \"#006064\",\r\n\t\t\t\"#1B5E20\", \"#33691E\", \"#F57F17\",\r\n\t\t\t\"#E65100\", \"#BF360C\", \"#3E2723\",\r\n\t\t\t\"#212121\", \"#263238\"\r\n\t\t];\r\n\t\tlet themes = [];\r\n\t\tfor(let i=0; i<lightColors.length; i++){\r\n\t\t\tthemes.push({\r\n\t\t\t\tlight: lightColors[i],\r\n\t\t\t\tdark: darkColors[i]\r\n\t\t\t});\r\n\t\t}\r\n\t\tthis.setState({themes: themes},()=>{\r\n\t\t\tthis.changeTheme();\r\n\t\t});\r\n\t\tsetTimeout(\r\n\t\t\t() => {\r\n\t\t\t\tfetch('https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json')\r\n\t\t\t\t.then(response => response.json())\r\n\t\t\t\t.then(response => {\r\n\t\t\t\t\tthis.setState({quotes: response.quotes});\r\n\t\t\t\t\tthis.fetchRandomQuote();\r\n\t\t\t\t})\r\n\t\t\t\t.catch(error => console.log(\"Fetch Quotes Failed\", error));\r\n\t\t\t}, 2000\r\n\t\t)\r\n\r\n\t}\r\n\trender(){\r\n\t\tif(!this.state.quotes.length){\r\n\t\t\treturn <Loading color={this.state.color}/>;\r\n\t\t}else{\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"d-flex flex-column align-content-stretch\">\r\n\t\t\t\t\t<div id=\"main\" className=\"d-flex align-items-center justify-content-center\" style={{backgroundColor: this.state.backgroundColor}}>\r\n\t\t\t\t\t<Card id=\"quote-box\" style={{border: \"1px solid \" + this.state.color, borderRadius: \"10px\"}}>\r\n\t\t\t\t\t\t<CardBody color=\"white\">\r\n\t\t\t\t\t\t\t<div className=\"d-flex flex-column align-items-stretch justify-content-center\">\r\n\t\t\t\t\t\t\t\t<div className=\"d-flex\">\r\n\t\t\t\t\t\t\t\t\t<p className=\"h1 mb-4 text-justify\" id=\"text\" style={{color: this.state.color}}>\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"fa fa-quote-left\">{''}</span>\r\n\t\t\t\t\t\t\t\t\t\t{' ' + this.state.quote + ' '}\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"fa fa-quote-right\">{''}</span>\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"d-flex flex-row justify-content-end\">\r\n\t\t\t\t\t\t\t\t\t<p id=\"author\" className=\"h3 text-right lead font-weight-bold font-italic\" style={{color: this.state.color}}>{'- ' + this.state.author}</p>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"d-flex flex-row align-items-center justify-content-between mt-3\">\r\n\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\thref={\"https://twitter.com/intent/tweet?text=\"+encodeURI(this.state.quote + '\\n- ' + this.state.author)}\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn p-lg-2\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"tweet-quote\"\r\n\t\t\t\t\t\t\t\t\t\tstyle={{backgroundColor: this.state.color, color: this.state.backgroundColor}}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"fa fa-2x fa-twitter\">{''}</span>\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\tstyle={{backgroundColor: this.state.color, color: this.state.backgroundColor}}\r\n\t\t\t\t\t\t\t\t\t\tclassName=\"btn px-lg-3\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"new-quote\"\r\n\t\t\t\t\t\t\t\t\t\tonClick={this.fetchRandomQuote}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t<span className=\"fa fa-lg fa-plus\">{''}</span>\r\n\t\t\t\t\t\t\t\t\t\t{'  New Quote'}\r\n\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</CardBody>\r\n\t\t\t\t\t</Card>\r\n\t\t\t\t</div>\r\n\t\t\t\t\t<footer className=\"container\">\r\n\t\t\t\t\t\t<div className=\"row p-3\">\r\n\t\t\t\t\t\t\t<div className=\"col\">\r\n\t\t\t\t\t\t\t\t<p className=\"text-center lead\">Created with <span className=\"fa fa-heart\" style={{color: \"red\"}}>{''}</span> by Lalit Jain</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</footer>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t}\r\n}\r\n\r\nexport default Main;","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './components/MainComponent';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\nclass App extends Component {\n  render() {\n    return (\n        <Main />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}